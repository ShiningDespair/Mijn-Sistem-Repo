/* Styles for Preloader component */

.preloaderWrapper {
  width: 100%;
  height: 100vh;
  margin: 0 auto;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 111; /* Ensure this is high enough */
  background: #fff;
  display: flex; /* Added to help center the preloader itself if needed */
  align-items: center; /* Added for centering */
  justify-content: center; /* Added for centering */
}

/* The .preloader div is centered by its parent .preloaderWrapper flex properties,
   so margin: 20% auto 0; might not be needed or can be adjusted.
   For this conversion, I'll keep it to see its effect. */
.preloader {
  margin: 0; /* Reset margin, rely on flexbox for centering from wrapper */
  /* margin: 20% auto 0; */ /* Original centering for block display */
  transform: translateZ(0);
  position: relative; /* Needed for ::before and ::after positioning */
  border-radius: 50%;
  width: 2em;
  height: 2em;
  animation: preloaderAnimation 1.2s infinite ease-in-out;
  animation-delay: -0.16s;
}

.preloader::before,
.preloader::after {
  content: '';
  position: absolute;
  top: 0;
  border-radius: 50%;
  width: 2em;
  height: 2em;
  animation: preloaderAnimation 1.2s infinite ease-in-out;
}

.preloader::before {
  left: -3.5em;
  animation-delay: -0.32s;
}

.preloader::after {
  left: 3.5em;
  /* No specific animation-delay for ::after in original, it takes the main .preloader's delay or default */
}

/*
  CSS Modules will typically prefix keyframe names.
  So, 'animation' becomes something like 'Preloader_animation__XXXXX'.
  The 'animation' property in .preloader, .preloader::before, .preloader::after
  should refer to this scoped name. Most CSS module setups handle this automatically.
  If not, one might need to use 'composes: animation from global;' or define it with a unique name.
  For now, naming it 'preloaderAnimation' and defining it within the module.
*/
@keyframes preloaderAnimation {
  0%,
  80%,
  100% {
    /* Using CSS variable from :root, ensure this variable is globally available (e.g. in global.css or index.css) */
    box-shadow: 0 2em 0 -1em var(--accent-color);
  }
  40% {
    box-shadow: 0 2em 0 0 var(--accent-color);
  }
}

/* Ensure --accent-color is defined globally, for example in src/styles/global.css:
:root {
  --accent-color: #FFC43F; // Or your desired color
}
*/
